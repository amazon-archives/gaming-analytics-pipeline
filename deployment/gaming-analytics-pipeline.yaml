AWSTemplateFormatVersion: "2010-09-09"
Description: (SO0035) - Ingest, Store, and Analyze Gameplay Telemetry
Parameters:
  RedshiftUsername:
    Type: "String"
    Default: "root"
    Description: "Used by redshift for solution setup."
    MinLength: 1
  RedshiftPassword:
    Type: "String"
    Description: "Must contain a lowercase character, an uppercase character, and a number."
    NoEcho: true
    MinLength: 8
  RedshiftWorkerPassword:
    Type: "String"
    Description: "Must contain a lowercase character, an uppercase character, and a number."
    NoEcho: true
    MinLength: 8
  RedshiftReadOnlyPassword:
    Type: "String"
    Description: "Must contain a lowercase character, an uppercase character, and a number."
    NoEcho: true
    MinLength: 8
  ToolsInstanceKeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
  ToolsInstanceCidrIp:
    Type: "String"
    Description: "CIDR Block for access to the tools instance"
    MinLength: 1
  SolutionMode:
    Type: "String"
    Description: "In demo mode, data moves through the pipeline faster, but is batched less efficiently."
    Default: "Demo"
    AllowedValues:
      - "Demo"
      - "Prod"
Conditions:
  IsDemoMode:
    !Equals ["Demo", !Ref SolutionMode]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Redshift"
        Parameters:
          - RedshiftUsername
          - RedshiftPassword
          - RedshiftWorkerPassword
          - RedshiftReadOnlyPassword
      - Label:
          default: "Tools Instance"
        Parameters:
          - ToolsInstanceKeyName
          - ToolsInstanceCidrIp
      - Label:
          default: "Solution Mode"
        Parameters:
          - SolutionMode
    ParameterLabels:
      RedshiftUsername:
        default: "Root Username"
      RedshiftPassword:
        default: "Root Password"
      RedshiftWorkerPassword:
        default: "Worker Password"
      RedshiftReadOnlyPassword:
        default: "ReadOnly Password"
      ToolsInstanceKeyName:
        default: "Tools Instance Key"
      ToolsInstanceCidrIp:
        default: "Tools Instance CIDR"
      SolutionMode:
        default: "Solution Mode"

Mappings:
  Solution:
    Data:
      ID: "SO0035"
      SendAnonymousUsageData: true
  RedshiftMappings:
    Usernames:
      worker: "analytics_worker"
      readonly: "analytics_ro"
    Databases:
      analytics: "analytics"
    Schemas:
      game: "game"
    Cluster:
      Port: 5439
  ToolsInstanceAMIs:
    "us-east-1":
      ami: "ami-21cc045b"
    "us-east-2":
      ami: "ami-d4775bb1"
    "us-west-1":
      ami: "ami-c44072a4"
    "us-west-2":
      ami: "ami-6b3ff913"
    "ca-central-1":
      ami: "ami-1ee9517a"
    "ap-south-1":
      ami: "ami-742d6e1b"
    "ap-northeast-2":
      ami: "ami-90f95cfe"
    "ap-southeast-1":
      ami: "ami-2b067d48"
    "ap-southeast-2":
      ami: "ami-5f61833d"
    "ap-northeast-1":
      ami: "ami-6726f901"
    "eu-central-1":
      ami: "ami-8a78c7e5"
    "eu-west-1":
      ami: "ami-56ec3e2f"
    "eu-west-2":
      ami: "ami-ebbfad8f"
    "sa-east-1":
      ami: "ami-a84d33c4"
  S3ConnectorOptionSettings:
    BufferByteSizeLimit:
      Demo: "2048"
      Prod: "104857600"
    BufferMillisecondsLimit:
      Demo: "10000"
      Prod: "600000"
    BufferRecordCountLimit:
      Demo: "5"
      Prod: "500000"
  RedshiftConnectorOptionSettings:
    BufferByteSizeLimit:
      Demo: "1024"
      Prod: "999999"
    BufferMillisecondsLimit:
      Demo: "30000"
      Prod: "600000"
    BufferRecordCountLimit:
      Demo: "5"
      Prod: "36"

Resources:

  # VPC
  AnalyticsVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "vpc"]]

  # Public Subnets
  AnalyticsSubnet1A:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      CidrBlock: "10.0.0.0/24"
      AvailabilityZone:
        !Select
          - 0
          - !GetAZs
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "analytics-subnet-1a"]]
      VpcId: !Ref AnalyticsVPC

  AnalyticsSubnet1B:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone:
        !Select
          - 1
          - !GetAZs
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "analytics-subnet-1b"]]
      VpcId: !Ref AnalyticsVPC

  RedshiftClusterSubnet1A:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.6.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        !Select
          - 0
          - !GetAZs
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "redshift-cluster-subnet-1a"]]
      VpcId: !Ref AnalyticsVPC

  RedshiftClusterSubnet1B:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.7.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        !Select
          - 0
          - !GetAZs
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "redshift-cluster-subnet-1b"]]
      VpcId: !Ref AnalyticsVPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "internet-gateway"]]

  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref AnalyticsVPC

  PublicSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref AnalyticsVPC
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "public-route-table"]]

  PublicSubnetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
    DependsOn: GatewayAttachment

  AnalyticsSubnet1ARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref AnalyticsSubnet1A

  AnalyticsSubnet1BRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref AnalyticsSubnet1B

  RedshiftClusterSubnet1ARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref RedshiftClusterSubnet1A

  RedshiftClusterSubnet1BRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref RedshiftClusterSubnet1B

  # Private Subnets
  S3ConnectorSubnet1A:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone:
        !Select
          - 0
          - !GetAZs
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "s3-connector-subnet-1a"]]
      VpcId: !Ref AnalyticsVPC

  S3ConnectorSubnet1B:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone:
        !Select
          - 1
          - !GetAZs
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "s3-connector-subnet-1b"]]
      VpcId: !Ref AnalyticsVPC

  RedshiftConnectorSubnet1A:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone:
        !Select
          - 0
          - !GetAZs
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "redshift-connector-subnet-1a"]]
      VpcId: !Ref AnalyticsVPC

  RedshiftConnectorSubnet1B:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.5.0/24"
      AvailabilityZone:
        !Select
          - 1
          - !GetAZs
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "redshift-connector-subnet-1b"]]
      VpcId: !Ref AnalyticsVPC

  CronConnectorSubnet1A:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.8.0/24"
      AvailabilityZone:
        !Select
          - 1
          - !GetAZs
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "cron-connector-subnet-1a"]]
      VpcId: !Ref AnalyticsVPC

  ElasticIP1A:
    Type: "AWS::EC2::EIP"
    DependsOn: GatewayAttachment

  NATGateway1A:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt ElasticIP1A.AllocationId
      SubnetId: !Ref AnalyticsSubnet1A

  PrivateSubnetRouteTable1A:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref AnalyticsVPC
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "private-route-table-1a"]]

  PrivateSubnetRoute1A:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway1A
      RouteTableId: !Ref PrivateSubnetRouteTable1A
    DependsOn:
      - NATGateway1A
      - PrivateSubnetRouteTable1A

  ElasticIP1B:
    Type: "AWS::EC2::EIP"
    DependsOn: GatewayAttachment

  NATGateway1B:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt ElasticIP1B.AllocationId
      SubnetId: !Ref AnalyticsSubnet1B

  PrivateSubnetRouteTable1B:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref AnalyticsVPC
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "private-route-table-1b"]]

  PrivateSubnetRoute1B:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway1B
      RouteTableId: !Ref PrivateSubnetRouteTable1B
    DependsOn:
      - NATGateway1B
      - PrivateSubnetRouteTable1B

  S3ConnectorSubnet1ARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable1A
      SubnetId: !Ref S3ConnectorSubnet1A

  S3ConnectorSubnet1BRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable1B
      SubnetId: !Ref S3ConnectorSubnet1B

  RedshiftConnectorSubnet1ARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable1A
      SubnetId: !Ref RedshiftConnectorSubnet1A

  RedshiftConnectorSubnet1BRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable1B
      SubnetId: !Ref RedshiftConnectorSubnet1B

  CronConnectorSubnet1ARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable1A
      SubnetId: !Ref CronConnectorSubnet1A

  # Security Group
  IntraVPCSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Intra-VPC Security Group"
      GroupDescription: "Security group that allows inbound from the VPC and outbound to the Internet"
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "intra-vpc-security-group"]]
      VpcId: !Ref AnalyticsVPC

  IntraVPCSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref IntraVPCSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref IntraVPCSecurityGroup

  RDPAccessSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      FromPort: !FindInMap [RedshiftMappings, Cluster, "Port"]
      ToPort: !FindInMap [RedshiftMappings, Cluster, "Port"]
      GroupId: !Ref IntraVPCSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref RDPAccessSecurityGroup

  S3VPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
        - !Ref PrivateSubnetRouteTable1A
        - !Ref PrivateSubnetRouteTable1B
      ServiceName: !Join ["", ["com.amazonaws.", !Ref "AWS::Region", ".s3"]]
      VpcId: !Ref AnalyticsVPC

  # S3 Buckets
  TelemetryBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Retain"
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - !Ref "AWS::AccountId"
          - !Ref "AWS::Region"
          - "telemetry"

  ErrorBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Retain"
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - !Ref "AWS::AccountId"
          - !Ref "AWS::Region"
          - "errors"

  CodeBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Retain"
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - !Ref "AWS::AccountId"
          - !Ref "AWS::Region"
          - "code"

  ConfigBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Retain"
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - !Ref "AWS::AccountId"
          - !Ref "AWS::Region"
          - "config"

  # Kinesis
  AnalyticsTelemetryStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      ShardCount: 4
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "analytics-telemetry-stream"]]

  AnalyticsFileStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      ShardCount: 2
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "analytics-file-stream"]]

  # Redshift
  RedshiftSubnetGroup:
    Type: "AWS::Redshift::ClusterSubnetGroup"
    Properties:
      Description: "Cluster group for analytics Redshift cluster"
      SubnetIds:
        - !Ref RedshiftClusterSubnet1A
        - !Ref RedshiftClusterSubnet1B
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "redshift-cluster-group"]]

  RedshiftParameterGroup:
    Type: "AWS::Redshift::ClusterParameterGroup"
    Properties:
      Description: "Parameter group for analytics Redshift cluster"
      ParameterGroupFamily: "redshift-1.0"
      Parameters:
        - ParameterName: "require_ssl"
          ParameterValue: true
        - ParameterName: "enable_user_activity_logging"
          ParameterValue: true
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "redshift-parameter-group"]]

  RedshiftCluster:
    Type: "AWS::Redshift::Cluster"
    DependsOn: GatewayAttachment
    Properties:
      ClusterType: "multi-node"
      ClusterParameterGroupName: !Ref RedshiftParameterGroup
      ClusterSubnetGroupName: !Ref RedshiftSubnetGroup
      DBName: !FindInMap [RedshiftMappings, Databases, "analytics"]
      Encrypted: true
      MasterUsername: !Ref RedshiftUsername
      MasterUserPassword: !Ref RedshiftPassword
      NodeType: "dc1.large"
      NumberOfNodes: 2
      Port: 5439
      PubliclyAccessible: true
      VpcSecurityGroupIds:
        - !Ref IntraVPCSecurityGroup
        - !Ref AllowExternalSecurityGroup

  AllowExternalSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows traffic from Kinesis Firehose and Amazon Quicksight"
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "52.70.63.192/27"
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "52.89.255.224/27"
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "52.19.239.192/27"
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "52.23.63.224/27"
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "54.70.204.128/27"
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "52.210.255.224/27"
      VpcId: !Ref AnalyticsVPC
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "allow-external-security-group"]]

  # IAM
  S3ConnectorRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier"
      Policies:
        - PolicyName: "S3ConnectorPolicy"
          PolicyDocument:
            Statement:

              # Attach inline policy to allow reading from "AnalyticsTelemetryStream" and writing to "AnalyticsFileStream"
              - Effect: "Allow"
                Action:
                  - "kinesis:Get*"
                  - "kinesis:DescribeStream"
                Resource: !GetAtt AnalyticsTelemetryStream.Arn
              - Effect: "Allow"
                Action:
                  - "kinesis:PutRecord"
                Resource: !GetAtt AnalyticsFileStream.Arn

              # Attach inline policy to allow writing to "analytics-telemetry-bucket" and "analytics-error-bucket"
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Join
                    - ""
                    - - !GetAtt TelemetryBucket.Arn
                      - "/*"
                  - !Join
                    - ""
                    - - !GetAtt ErrorBucket.Arn
                      - "/*"

              # Attach inline policy to allow writing to DynamoDB
              - Effect: "Allow"
                Action:
                  - "dynamodb:*"
                Resource: !Join
                  - ""
                  - - "arn:aws:dynamodb:"
                    - !Ref "AWS::Region"
                    - ":"
                    - !Ref "AWS::AccountId"
                    - ":"
                    - "table/"
                    - !Ref "AWS::StackName"
                    - "-AnalyticsS3CompoundConnector"

              # Attach inline policy to allow writing to CloudWatch Logs
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: !Join
                  - ":"
                  - - "arn:aws:logs"
                    - !Ref "AWS::Region"
                    - !Ref "AWS::AccountId"
                    - "log-group:*"

              # Attach inline policy to allow writing to CloudWatch Metrics
              - Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                Resource: !Join
                  - ""
                  - - "*"

  S3ConnectorInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref S3ConnectorRole

  RedshiftConnectorRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier"
      Policies:
        - PolicyName: "redshift-access-policy"
          PolicyDocument:
            Statement:

              # Attach inline policy to allow reading from "AnalyticsFileStream"
              - Effect: "Allow"
                Action:
                  - "kinesis:DescribeStream"
                  - "kinesis:GetRecords"
                  - "kinesis:GetShardIterator"
                Resource: !GetAtt AnalyticsFileStream.Arn

              # Attach inline policy to allow writing to DynamoDB
              - Effect: "Allow"
                Action:
                  - "dynamodb:CreateTable"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource: !Join
                  - ":"
                  - - "arn:aws:dynamodb"
                    - !Ref "AWS::Region"
                    - !Ref "AWS::AccountId"
                    - "table/*"

              # Attach inline policy to allow reading/writing from S3 configuration bucket
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource:
                  - !Join
                    - ""
                    - - !GetAtt ConfigBucket.Arn
                      - "/*"

              # Attach inline policy to allow reading/writing from S3 configuration bucket
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Join
                    - ""
                    - - !GetAtt TelemetryBucket.Arn
                      - "/*"
                  - !GetAtt TelemetryBucket.Arn

              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Join
                    - ""
                    - - !GetAtt TelemetryBucket.Arn
                      - "/manifests/*"

              # Attach inline policy to allow Redshift access
              - Effect: "Allow"
                Action:
                  - "redshift:GetClusterCredentials"
                Resource:
                  - !Join
                    - ""
                    - - "arn:aws:redshift:"
                      - !Ref "AWS::Region"
                      - ":"
                      - !Ref "AWS::AccountId"
                      - ":dbname:"
                      - !Ref RedshiftCluster
                      - "/"
                      - !FindInMap [RedshiftMappings, Databases, "analytics"]
                  - !Join
                    - ""
                    - - "arn:aws:redshift:"
                      - !Ref "AWS::Region"
                      - ":"
                      - !Ref "AWS::AccountId"
                      - ":dbuser:"
                      - !Ref RedshiftCluster
                      - "/"
                      - !FindInMap [RedshiftMappings, Usernames, "worker"]
                  - !Join
                    - ""
                    - - "arn:aws:redshift:"
                      - !Ref "AWS::Region"
                      - ":"
                      - !Ref "AWS::AccountId"
                      - ":dbuser:"
                      - !Ref RedshiftCluster
                      - "/"
                      - !FindInMap [RedshiftMappings, Usernames, "readonly"]

              # Attach inline policy to allow writing to CloudWatch Logs
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: !Join
                  - ":"
                  - - "arn:aws:logs"
                    - !Ref "AWS::Region"
                    - !Ref "AWS::AccountId"
                    - "log-group:*"
              # Attach inline policy to allow writing to CloudWatch Metrics
              - Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                Resource: !Join
                  - ""
                  - - "*"

  RedshiftConnectorInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref RedshiftConnectorRole

  CronConnectorRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier"
      Policies:
        - PolicyName: "cronconnector-access-policy"
          PolicyDocument:
            Statement:

              # Attach inline policy to allow reading from "AnalyticsFileStream"
              - Effect: "Allow"
                Action:
                  - "kinesis:DescribeStream"
                  - "kinesis:GetRecords"
                  - "kinesis:GetShardIterator"
                Resource: !GetAtt AnalyticsFileStream.Arn

              # Attach inline policy to allow Redshift access
              - Effect: "Allow"
                Action:
                  - "redshift:GetClusterCredentials"
                Resource:
                  - !Join
                    - ""
                    - - "arn:aws:redshift:"
                      - !Ref "AWS::Region"
                      - ":"
                      - !Ref "AWS::AccountId"
                      - ":dbname:"
                      - !Ref RedshiftCluster
                      - "/"
                      - !FindInMap [RedshiftMappings, Databases, "analytics"]
                  - !Join
                    - ""
                    - - "arn:aws:redshift:"
                      - !Ref "AWS::Region"
                      - ":"
                      - !Ref "AWS::AccountId"
                      - ":dbuser:"
                      - !Ref RedshiftCluster
                      - "/"
                      - !FindInMap [RedshiftMappings, Usernames, "worker"]

              # Attach inline policy to allow writing to CloudWatch Logs
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: !Join
                  - ":"
                  - - "arn:aws:logs"
                    - !Ref "AWS::Region"
                    - !Ref "AWS::AccountId"
                    - "log-group:*"

              # Attach inline policy to allow writing to CloudWatch Metrics
              - Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:ListMetrics"
                Resource: !Join
                  - ""
                  - - "*"

  CronConnectorInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref CronConnectorRole

  TelemetryPublisherRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier"
      Policies:
        - PolicyName: "S3ConnectorPolicy"
          PolicyDocument:
            Statement:

              # Attach inline policy to allow writing to "AnalyticsTelemetryStream"
              - Effect: "Allow"
                Action:
                  - "kinesis:PutRecord"
                Resource: !GetAtt AnalyticsTelemetryStream.Arn

  AnalyticsApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: "Gaming Analytics Pipeline Application"

  AnalyticsApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref AnalyticsApplication
      Description: "S3 Connector"
      SourceBundle:
        S3Bucket: !Join
          - "-"
          - - "%%BUCKET_NAME%%"
            - !Ref "AWS::Region"
        S3Key: "gaming-analytics-pipeline/latest/analytics-pipeline-1.0.0.war"

  s3ConnectorConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref AnalyticsApplication
      Description: "S3 Connector"
      OptionSettings:
        - Namespace: "aws:autoscaling:asg"
          OptionName: "MinSize"
          Value: 2
        - Namespace: "aws:autoscaling:asg"
          OptionName: "MaxSize"
          Value: 4
        - Namespace: "aws:autoscaling:trigger"
          OptionName: "MeasureName"
          Value: "CPUUtilization"
        - Namespace: "aws:autoscaling:trigger"
          OptionName: "Unit"
          Value: "Percent"
        - Namespace: "aws:autoscaling:trigger"
          OptionName: "LowerThreshold"
          Value: 20
        - Namespace: "aws:autoscaling:trigger"
          OptionName: "UpperThreshold"
          Value: 80
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: SecurityGroups
          Value: !Ref IntraVPCSecurityGroup
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: IamInstanceProfile
          Value: !Ref S3ConnectorInstanceProfile
        - Namespace: "aws:ElasticBeanstalk:environment"
          OptionName: "ServiceRole"
          Value: "arn:aws:iam::208800812415:role/aws-elasticbeanstalk-service-role"
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: InstanceType
          Value: "t2.small"
        - Namespace: "aws:elasticbeanstalk:environment"
          OptionName: "EnvironmentType"
          Value: "LoadBalanced"
        - Namespace: "aws:ec2:vpc"
          OptionName: "VPCId"
          Value: !Ref AnalyticsVPC
        - Namespace: "aws:ec2:vpc"
          OptionName: "Subnets"
          Value: !Join
            - ", "
            - - !Ref S3ConnectorSubnet1A
              - !Ref S3ConnectorSubnet1B
        - Namespace: "aws:ec2:vpc"
          OptionName: "ELBScheme"
          Value: "internal"
        - Namespace: "aws:elasticbeanstalk:container:tomcat:jvmoptions"
          OptionName: "Xms"
          Value: "512m"
        - Namespace: "aws:elasticbeanstalk:container:tomcat:jvmoptions"
          OptionName: "Xmx"
          Value: "1024m"
        - Namespace: "aws:elasticbeanstalk:application"
          OptionName: "Application HealthCheck URL"
          Value: "/health"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "ConnectorType"
          Value: "s3compound"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "ProjectName"
          Value: "analytics"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "aws_region_name"
          Value: !Ref "AWS::Region"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "kinesis_app_name"
          Value: !Join ["-", [!Ref "AWS::StackName", "AnalyticsS3CompoundConnector"]]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "kinesis_file_stream"
          Value: !Ref AnalyticsFileStream
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "kinesis_input_stream"
          Value: !Ref AnalyticsTelemetryStream
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "s3_config_bucket"
          Value: !Ref ConfigBucket
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "s3_telemetry_bucket"
          Value: !Ref TelemetryBucket
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "s3_error_bucket"
          Value: !Ref ErrorBucket
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "buffer_byte_size_limit"
          Value: !FindInMap [S3ConnectorOptionSettings, BufferByteSizeLimit, !Ref SolutionMode]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "buffer_milliseconds_limit"
          Value: !FindInMap [S3ConnectorOptionSettings, BufferMillisecondsLimit, !Ref SolutionMode]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "buffer_record_count_limit"
          Value: !FindInMap [S3ConnectorOptionSettings, BufferRecordCountLimit, !Ref SolutionMode]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "send_anonymous_data"
          Value: !FindInMap [Solution, Data, "SendAnonymousUsageData"]
      PlatformArn: !Join
        - ""
        - - "arn:aws:elasticbeanstalk:"
          - !Ref "AWS::Region"
          - "::platform/Tomcat 8 with Java 8 running on 64bit Amazon Linux"

  s3ConnectorEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    DependsOn: CronConnectorEnvironment
    Properties:
      ApplicationName: !Ref AnalyticsApplication
      Description: "S3 Connector Environment"
      TemplateName: !Ref s3ConnectorConfigurationTemplate
      VersionLabel: !Ref AnalyticsApplicationVersion

  redshiftConnectorConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref AnalyticsApplication
      Description: "S3 Connector"
      OptionSettings:
        - Namespace: "aws:autoscaling:asg"
          OptionName: "MinSize"
          Value: 2
        - Namespace: "aws:autoscaling:asg"
          OptionName: "MaxSize"
          Value: 2
        - Namespace: "aws:autoscaling:trigger"
          OptionName: "MeasureName"
          Value: "CPUUtilization"
        - Namespace: "aws:autoscaling:trigger"
          OptionName: "Unit"
          Value: "Percent"
        - Namespace: "aws:autoscaling:trigger"
          OptionName: "LowerThreshold"
          Value: 20
        - Namespace: "aws:autoscaling:trigger"
          OptionName: "UpperThreshold"
          Value: 80
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: SecurityGroups
          Value: !Ref IntraVPCSecurityGroup
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: IamInstanceProfile
          Value: !Ref RedshiftConnectorInstanceProfile
        - Namespace: "aws:ElasticBeanstalk:environment"
          OptionName: "ServiceRole"
          Value: "arn:aws:iam::208800812415:role/aws-elasticbeanstalk-service-role"
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: InstanceType
          Value: "t2.small"
        - Namespace: "aws:elasticbeanstalk:environment"
          OptionName: "EnvironmentType"
          Value: "LoadBalanced"
        - Namespace: "aws:ec2:vpc"
          OptionName: "VPCId"
          Value: !Ref AnalyticsVPC
        - Namespace: "aws:ec2:vpc"
          OptionName: "Subnets"
          Value: !Join
            - ", "
            - - !Ref RedshiftConnectorSubnet1A
              - !Ref RedshiftConnectorSubnet1B
        - Namespace: "aws:ec2:vpc"
          OptionName: "ELBScheme"
          Value: "internal"
        - Namespace: "aws:elasticbeanstalk:container:tomcat:jvmoptions"
          OptionName: "Xms"
          Value: "512m"
        - Namespace: "aws:elasticbeanstalk:container:tomcat:jvmoptions"
          OptionName: "Xmx"
          Value: "1024m"
        - Namespace: "aws:elasticbeanstalk:application"
          OptionName: "Application HealthCheck URL"
          Value: "/health"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "kinesis_app_name"
          Value: !Join ["-", [!Ref "AWS::StackName", "AnalyticsRedshiftConnector"]]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "ConnectorType"
          Value: "redshift"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "ProjectName"
          Value: "analytics"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "aws_region_name"
          Value: !Ref "AWS::Region"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "kinesis_input_stream"
          Value: !Ref AnalyticsFileStream
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "redshift_cluster_identifier"
          Value: !Ref RedshiftCluster
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "redshift_jdbc"
          Value: !Join
            - ""
            - - "jdbc:redshift://"
              - !GetAtt RedshiftCluster.Endpoint.Address
              - ":"
              - !GetAtt RedshiftCluster.Endpoint.Port
              - "/"
              - !FindInMap [RedshiftMappings, Databases, "analytics"]
              - "?ssl=true"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "s3_config_bucket"
          Value: !Ref ConfigBucket
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "s3_telemetry_bucket"
          Value: !Ref TelemetryBucket
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "redshift_worker_username"
          Value: !FindInMap [RedshiftMappings, Usernames, "worker"]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "redshift_database"
          Value: !FindInMap [RedshiftMappings, Databases, "analytics"]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "redshift_schema"
          Value: !FindInMap [RedshiftMappings, Schemas, "game"]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "buffer_byte_size_limit"
          Value: !FindInMap [RedshiftConnectorOptionSettings, BufferByteSizeLimit, !Ref SolutionMode]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "buffer_milliseconds_limit"
          Value: !FindInMap [RedshiftConnectorOptionSettings, BufferMillisecondsLimit, !Ref SolutionMode]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "buffer_record_count_limit"
          Value: !FindInMap [RedshiftConnectorOptionSettings, BufferRecordCountLimit, !Ref SolutionMode]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "send_anonymous_data"
          Value: !FindInMap [Solution, Data, "SendAnonymousUsageData"]
      PlatformArn: !Join
        - ""
        - - "arn:aws:elasticbeanstalk:"
          - !Ref "AWS::Region"
          - "::platform/Tomcat 8 with Java 8 running on 64bit Amazon Linux"

  RedshiftConnectorEnvironment:
    DependsOn: CronConnectorEnvironment
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref AnalyticsApplication
      Description: "Redshift Connector Environment"
      TemplateName: !Ref redshiftConnectorConfigurationTemplate
      VersionLabel: !Ref AnalyticsApplicationVersion

  CronConnectorConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref AnalyticsApplication
      Description: "Cron Connector"
      OptionSettings:
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: SecurityGroups
          Value: !Ref IntraVPCSecurityGroup
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: IamInstanceProfile
          Value: !Ref CronConnectorInstanceProfile
        - Namespace: "aws:ElasticBeanstalk:environment"
          OptionName: "ServiceRole"
          Value: "arn:aws:iam::208800812415:role/aws-elasticbeanstalk-service-role"
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: InstanceType
          Value: "t2.small"
        - Namespace: "aws:elasticbeanstalk:environment"
          OptionName: "EnvironmentType"
          Value: "SingleInstance"
        - Namespace: "aws:ec2:vpc"
          OptionName: "VPCId"
          Value: !Ref AnalyticsVPC
        - Namespace: "aws:ec2:vpc"
          OptionName: "Subnets"
          Value: !Ref CronConnectorSubnet1A
        - Namespace: "aws:elasticbeanstalk:container:tomcat:jvmoptions"
          OptionName: "Xms"
          Value: "512m"
        - Namespace: "aws:elasticbeanstalk:container:tomcat:jvmoptions"
          OptionName: "Xmx"
          Value: "1024m"
        - Namespace: "aws:elasticbeanstalk:application"
          OptionName: "Application HealthCheck URL"
          Value: "/health"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "ConnectorType"
          Value: "cron"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "ProjectName"
          Value: "analytics"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "aws_region_name"
          Value: !Ref "AWS::Region"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "redshift_cluster_identifier"
          Value: !Ref RedshiftCluster
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "redshift_jdbc"
          Value: !Join
            - ""
            - - "jdbc:redshift://"
              - !GetAtt RedshiftCluster.Endpoint.Address
              - ":"
              - !GetAtt RedshiftCluster.Endpoint.Port
              - "/"
              - !FindInMap [RedshiftMappings, Databases, "analytics"]
              - "?ssl=true"
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "redshift_worker_username"
          Value: !FindInMap [RedshiftMappings, Usernames, "worker"]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "redshift_readonly_username"
          Value: !FindInMap [RedshiftMappings, Usernames, "readonly"]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "redshift_database"
          Value: !FindInMap [RedshiftMappings, Databases, "analytics"]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "redshift_schema"
          Value: !FindInMap [RedshiftMappings, Schemas, "game"]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "solution_id"
          Value: !FindInMap [Solution, Data, "ID"]
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "solution_uuid"
          Value: !GetAtt CreateUniqueID.UUID
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "send_anonymous_data"
          Value: !FindInMap [Solution, Data, "SendAnonymousUsageData"]
      PlatformArn: !Join
        - ""
        - - "arn:aws:elasticbeanstalk:"
          - !Ref "AWS::Region"
          - "::platform/Tomcat 8 with Java 8 running on 64bit Amazon Linux"

  CronConnectorEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    DependsOn: CustomResource
    Properties:
      ApplicationName: !Ref AnalyticsApplication
      Description: "Cron Connector Environment"
      TemplateName: !Ref CronConnectorConfigurationTemplate
      VersionLabel: !Ref AnalyticsApplicationVersion

  # Redshift Setup Custom Resource
  CustomResourceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"

  CustomResourceLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Join
          - "-"
          - - "%%BUCKET_NAME%%"
            - !Ref "AWS::Region"
        S3Key: "gaming-analytics-pipeline/latest/custom-resource.zip"
      Handler: "custom_resource/custom_resource.lambda_handler"
      Runtime: python2.7
      Timeout: 30
      Role: !GetAtt CustomResourceRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref IntraVPCSecurityGroup
        SubnetIds:
          - !Ref CustomResourceSubnet

  CustomResource:
    Type: "Custom::CustomResource"
    DependsOn:
      - RedshiftCluster
      - RedshiftClusterSubnet1A
      - RedshiftClusterSubnet1ARouteTableAssociation
      - RedshiftClusterSubnet1B
      - RedshiftClusterSubnet1BRouteTableAssociation
      - CustomResourceSubnetRoute
      - CustomResourceRouteTableAssociation
      - CustomResourceNGW
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn
      Username: !Ref RedshiftUsername
      Password: !Ref RedshiftPassword
      DatabaseName: !FindInMap [RedshiftMappings, Databases, "analytics"]
      Host: !GetAtt RedshiftCluster.Endpoint.Address
      Port: !GetAtt RedshiftCluster.Endpoint.Port
      WorkerUsername: !FindInMap [RedshiftMappings, Usernames, "worker"]
      WorkerPassword: !Ref RedshiftWorkerPassword
      ReadOnlyUsername: !FindInMap [RedshiftMappings, Usernames, "readonly"]
      ReadOnlyPassword: !Ref RedshiftReadOnlyPassword
      SchemaName: !FindInMap [RedshiftMappings, Schemas, "game"]

  CustomResourceSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.10.16/28"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "custom-resource-subnet-1a"]]
      VpcId: !Ref AnalyticsVPC

  CustomResourceSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref AnalyticsVPC
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "custom-resource-route-table"]]

  CustomResourceSubnetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref CustomResourceNGW
      RouteTableId: !Ref CustomResourceSubnetRouteTable

  CustomResourceNGWEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  CustomResourceNGW:
    Type: "AWS::EC2::NatGateway"
    DependsOn:
      - CustomResourceNGWEIP
    Properties:
      AllocationId: !GetAtt CustomResourceNGWEIP.AllocationId
      SubnetId: !Ref RedshiftClusterSubnet1A

  CustomResourceRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref CustomResourceSubnetRouteTable
      SubnetId: !Ref CustomResourceSubnet

  # Tools Host
  ToolsInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      # Microsoft Windows Server 2016 with SQL Server 2017 Express
      ImageId: !FindInMap [ToolsInstanceAMIs, !Ref "AWS::Region", "ami"]
      InstanceType: "t2.micro"
      IamInstanceProfile: !Ref ToolsInstanceProfile
      SecurityGroupIds:
        - !Ref RDPAccessSecurityGroup
      SubnetId: !Ref AnalyticsSubnet1A
      KeyName: !Ref ToolsInstanceKeyName
      Tags:
        - Key: "Name"
          Value: !Join ["-", [!Ref "AWS::StackName", "tools-instance"]]
      UserData:
        Fn::Base64:
          !Join
            - ""
            - - "<script>\n"
              - "cfn-init.exe -v -s "
              - !Ref "AWS::StackId"
              - " -r ToolsInstance"
              - " --region "
              - !Ref "AWS::Region"
              - "\n"
              - "cfn-signal.exe \n"
              - "</script>"
              - "<powershell>"
              - "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) \n"
              - "$env:Path = [System.Environment]::GetEnvironmentVariable('Path','Machine') + ';' + [System.Environment]::GetEnvironmentVariable('Path','User') \n"
              - "choco install -y python2 \n"
              - "refreshenv \n"
              - "c:\\tmp\\extract-tools.ps1 \n"
              - "</powershell>"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "C:\\tmp\\extract-tools.ps1":
              source: !Join
                - ""
                - - "https://%%BUCKET_NAME%%-"
                  - !Ref "AWS::Region"
                  - ".s3.amazonaws.com/gaming-analytics-pipeline/latest/extract-tools.ps1"
            "C:\\tmp\\data-generator.zip":
              source: !Join
                - ""
                - - "https://%%BUCKET_NAME%%-"
                  - !Ref "AWS::Region"
                  - ".s3.amazonaws.com/gaming-analytics-pipeline/latest/data-generator.zip"
            "C:\\tmp\\heatmap-generator.zip":
              source: !Join
                - ""
                - - "https://%%BUCKET_NAME%%-"
                  - !Ref "AWS::Region"
                  - ".s3.amazonaws.com/gaming-analytics-pipeline/latest/heatmap-generator.zip"

  ToolsInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref ToolsInstanceRole

  ToolsInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "tools-host-policy"
          PolicyDocument:
            Statement:

              # Attach inline policy to allow reading from "AnalyticsFileStream"
              - Effect: "Allow"
                Action:
                  - "kinesis:PutRecords"
                Resource: !GetAtt AnalyticsTelemetryStream.Arn

              # Attach inline policy to allow Redshift access
              - Effect: "Allow"
                Action:
                  - "redshift:GetClusterCredentials"
                Resource:
                  - !Join
                    - ""
                    - - "arn:aws:redshift:"
                      - !Ref "AWS::Region"
                      - ":"
                      - !Ref "AWS::AccountId"
                      - ":dbname:"
                      - !Ref RedshiftCluster
                      - "/"
                      - !FindInMap [RedshiftMappings, Databases, "analytics"]
                  - !Join
                    - ""
                    - - "arn:aws:redshift:"
                      - !Ref "AWS::Region"
                      - ":"
                      - !Ref "AWS::AccountId"
                      - ":dbuser:"
                      - !Ref RedshiftCluster
                      - "/"
                      - !FindInMap [RedshiftMappings, Usernames, "worker"]
                  - !Join
                    - ""
                    - - "arn:aws:redshift:"
                      - !Ref "AWS::Region"
                      - ":"
                      - !Ref "AWS::AccountId"
                      - ":dbuser:"
                      - !Ref RedshiftCluster
                      - "/"
                      - !FindInMap [RedshiftMappings, Usernames, "readonly"]

  RDPAccessSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows RDP access to tools host"
      VpcId: !Ref AnalyticsVPC
      SecurityGroupIngress:
        IpProtocol: "tcp"
        FromPort: "3389"
        ToPort: "3389"
        CidrIp: !Ref ToolsInstanceCidrIp

  # Metrics Gathering
  SolutionHelper:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "solution-helper.lambda_handler"
      Role: !GetAtt SolutionHelperRole.Arn
      Description: "Helper function for generating a UUID"
      Code:
        S3Bucket: !Join
          - "-"
          - - "solutions"
            - !Ref "AWS::Region"
        S3Key: "library/solution-helper/v3/solution-helper.zip"
      Runtime: "python2.7"
      Timeout: 300

  SolutionHelperRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  CreateUniqueID:
    Type: "Custom::LoadLambda"
    Properties:
      ServiceToken: !GetAtt SolutionHelper.Arn
      Region: !Ref "AWS::Region"
      CreateUniqueID: true

Outputs:
  TelemetryStreamName:
    Value: !Ref AnalyticsTelemetryStream
  RedshiftDatabaseName:
    Value: !FindInMap [RedshiftMappings, Databases, "analytics"]
  RedshiftHost:
    Value: !GetAtt RedshiftCluster.Endpoint.Address
  RedshiftPort:
    Value: !GetAtt RedshiftCluster.Endpoint.Port
  WorkerUsername:
    Value: !FindInMap [RedshiftMappings, Usernames, "worker"]
  ReadOnlyUsername:
    Value: !FindInMap [RedshiftMappings, Usernames, "readonly"]
  CustomResourceLambdaArn:
    Value: !GetAtt CustomResourceLambda.Arn
  GenerateDataCommand:
    Value: !Join
      - " "
      - - "python .\\publish_data.py"
        - "-r"
        - !Ref "AWS::Region"
        - "-s"
        - !Ref AnalyticsTelemetryStream
        - "-i"
        - ".\\heatmap-sample-data.txt"
  GenerateHeatmapCommand:
    Value: !Join
      - " "
      - - "python .\\generate_heatmap.py"
        - "--db_host"
        - !GetAtt RedshiftCluster.Endpoint.Address
        - "-r"
        - !Ref "AWS::Region"
        - "-c"
        - !Ref RedshiftCluster
        - "-e player_death"
  SolutionUUID:
    Value: !GetAtt CreateUniqueID.UUID
